name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 1 * * 1-5"

env:
  DYNAWO_VERSION: 1.6.0

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_FORCE_CXX11_ABI: "true"
      DYNAWO_NB_PROCESSORS_USED: 2
      GH_API: ${{ github.api_url }}/repos/${{ github.repository }}
      GH_API_DYNAWO: ${{ github.api_url }}/repos/${{ github.repository_owner }}/dynawo
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CURL_JSON: 'curl --silent -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --header "Content-Type: application/json"'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Dynawo
        run: |
          source .github/workflows/tools.sh
          download_asset $GH_API_DYNAWO nightly Dynawo_headers_V${DYNAWO_VERSION}.zip $GITHUB_TOKEN

      - name: Unzip Dynawo
        run: |
          find . -name "Dynawo_headers_V*zip" -exec unzip -qq {} \;

      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build

      - name: Prepare files for distribution
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh distrib
          util/envDynawoAlgorithms.sh distrib-headers

      - name: INFO. Files created in distributions folder
        run: du -hs distributions/*

      - name: Delete previous nightly release
        run: |
          source .github/workflows/tools.sh

          echo "Obtain previous release id and delete it"
          RELEASE_ID=$(eval $CURL_JSON "$GH_API/releases" | python3 -c 'import sys, json; releases=[release["id"] for release in json.load(sys.stdin) if release["tag_name"]=="nightly"]; print(releases[0] if releases else "")')
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Release id with tag 'nightly' found: $RELEASE_ID"
            echo "Delete release $RELEASE_ID ..."
            curl \
              --request DELETE \
              --url "$GH_API/releases/$RELEASE_ID" \
              --header "authorization: Bearer $GITHUB_TOKEN"
            echo "Wait for release to be deleted ..."
            wait_for_http_code "$GH_API/releases/$RELEASE_ID" 404 $GITHUB_TOKEN
          else
            echo "Previous nightly release not found"
          fi

      - name: INFO. List of all releases after deleting nightly
        run: eval $CURL_JSON "$GH_API/releases"

      - name: Delete previous nightly tag
        run: |
          source .github/workflows/tools.sh

          echo "Delete previous tag. Won't fail if it does not exist"
          curl \
            --request DELETE \
            --url "$GH_API/git/refs/tags/nightly" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json"

          echo "Wait for tag to be deleted ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 404 $GITHUB_TOKEN

      - name: INFO. Nightly tag should not be found
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Get last commit in master
        run: |
          echo "Obtaining refs/heads/master ..."
          HEAD_MASTER=$(eval $CURL_JSON "$GH_API/git/refs/heads/master")
          echo "Head master:"
          echo $HEAD_MASTER
          SHA_HEAD_MASTER=$(echo $HEAD_MASTER | python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')
          echo "Last commit in master has SHA = $SHA_HEAD_MASTER"
          echo "MASTER_COMMIT_ID=$SHA_HEAD_MASTER" >> $GITHUB_ENV

      - name: INFO. Check last commit in master
        run: echo "Last commit in master SHA = $MASTER_COMMIT_ID"

      - name: Create tag nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create tag nightly based on last commit in master branch"
          curl \
            --request POST \
            --url "$GH_API/git/refs" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
                "ref": "refs/tags/nightly",
                "sha": "'$MASTER_COMMIT_ID'"
                }'
          echo "Wait for tag to be created ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 200 $GITHUB_TOKEN

      - name: INFO. Tag nightly created"
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Create release nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create release nightly"
          curl \
            --request POST \
            --url "$GH_API/releases" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
                "tag_name" : "nightly",
                "target_commitish" : "'$MASTER_COMMIT_ID'",
                "name" : "Nightly",
                "body" : "Dynawo'"'"'s nightly release. Compiled on *release* settings.\n\n**Don'"'"'t use it for production**",
                "draft" : false,
                "prerelease" : true
                }'
          echo "Wait for the release to be published ..."
          wait_for_http_code "$GH_API/releases/tags/nightly" 200 $GITHUB_TOKEN

      - name: INFO. Release object created for tag nightly"
        run: eval $CURL_JSON "$GH_API/releases/tags/nightly"

      - name: Upload assets for release
        run: |
          source .github/workflows/tools.sh
          echo "Obtain upload and assets urls from created release:"
          RELEASE=$(eval $CURL_JSON "$GH_API/releases/tags/nightly")
          UPLOAD_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["upload_url"]))' | grep -o ".*assets")
          echo "Release upload URL = $UPLOAD_URL"
          ASSETS_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["assets_url"]))')
          echo "Release assets URL = $ASSETS_URL"
          echo "ASSETS_URL=$ASSETS_URL" >> $GITHUB_ENV

          echo "Upload assets"
          cd distributions
          for FILE in *zip; do
            [ -f "$FILE" ] || break
            echo "Upload asset $FILE"
            upload_zip_file $UPLOAD_URL $FILE ${{ secrets.GITHUB_TOKEN }}
          done

      - name: INFO. Release assets
        run: eval $CURL_JSON $ASSETS_URL

  windows:
    name: Windows 2019 (Release, VS2019)
    runs-on: windows-2019
    needs: fedora
    steps:
      - name: No LF to CRLF conversion
        shell: cmd
        run: git config --global core.autocrlf input

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download MS-MPI
        shell: bash
        run: |
          curl -Os https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisdk.msi
          curl -Os https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe

      - name: Install MS-MPI
        shell: cmd
        run: |
          msmpisdk.msi /passive
          msmpisetup.exe /unattend

      - name: Fetch Dynawo
        shell: bash
        run: curl -LOs https://github.com/dynawo/dynawo/releases/download/nightly/Dynawo_Windows_v$DYNAWO_VERSION.zip

      - name: Unzip Dynawo
        shell: cmd
        run: 7z x Dynawo_Windows_v%DYNAWO_VERSION%.zip -o..\deploy

      - name: Dynawo version
        shell: cmd
        run: ..\deploy\dynawo\dynawo version

      # use a minimal PATH to avoid too long command lines and conflict with Strawberry pkg-config !
      - name: Build and install
        shell: cmd
        env:
          MSMPI_INC: C:\Program Files (x86)\Microsoft SDKs\MPI\Include\
          MSMPI_LIB32: C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x86\
          MSMPI_LIB64: C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x64\
          PATH: C:\Windows\system32;C:\Program Files\Git\cmd;C:\hostedtoolcache\windows\Python\3.7.9\x64
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          call util\windows\dynawo-algorithms verbose build

      - name: Dynawo-Algorithms version
        shell: cmd
        env:
          PATH: C:\Windows\system32;C:\Program Files\Git\cmd;C:\hostedtoolcache\windows\Python\3.7.9\x64
        run: call ..\da-i\dynawo-algorithms verbose version

      - name: Run NRT
        shell: cmd
        env:
          MSMPI_BENCHMARKS: C:\Program Files\Microsoft MPI\Benchmarks\
          MSMPI_BIN: C:\Program Files\Microsoft MPI\Bin\
          PATH: C:\Windows\system32;C:\Program Files\Git\cmd;C:\hostedtoolcache\windows\Python\3.7.9\x64;C:\hostedtoolcache\windows\Python\3.7.9\x64\Scripts
        run: |
          pip install lxml psutil
          set PATH=%MSMPI_BIN%;%PATH%
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          call util\windows\dynawo-algorithms verbose nrt

      - name: Create distribution
        shell: cmd
        env:
          PATH: C:\Windows\system32;C:\Program Files\Git\cmd;C:\hostedtoolcache\windows\Python\3.7.9\x64
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          call util\windows\dynawo-algorithms verbose distrib-headers
          dir ..\distrib

      - name: Rename distribution
        shell: bash
        run: |
          cd ../distrib
          zip=$(ls DynawoAlgorithms_*.zip)
          version=$(echo $zip | cut -d '_' -f 4 | cut -d '.' -f 1-3)
          distrib=DynawoAlgorithms_Windows_$version.zip
          mv $zip $distrib
          echo "ZIP=$distrib" >> $GITHUB_OUTPUT
        id: distrib

      - name: Upload distribution
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly
          files: ../distrib/${{steps.distrib.outputs.ZIP}}
